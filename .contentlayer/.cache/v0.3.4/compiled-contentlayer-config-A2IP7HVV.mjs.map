{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer/source-files\";\r\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport rehypePrettyCode from 'rehype-pretty-code';\r\nimport GithubSlugger from \"github-slugger\"\r\nimport readingTime from \"reading-time\";\r\n\r\nexport const Blog = defineDocumentType(() => ({\r\n  name: \"Blog\",\r\n  filePathPattern: `**/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: { type: \"string\", required: true },\r\n    publishedAt: {\r\n      type: \"date\",\r\n      required: true,\r\n    },\r\n    updatedAt: {\r\n      type: \"date\",\r\n      required: true,\r\n    },\r\n    description: { type: \"string\", required: true },\r\n    image: { type: \"image\" },\r\n    isPublished: {\r\n      type: \"boolean\",\r\n      default: false,\r\n    },\r\n    author: { type: \"string\", required: true },\r\n    tags: {\r\n      type: \"list\",\r\n      of: { type: \"string\" },\r\n    },\r\n  },\r\n  computedFields: {\r\n    url: {\r\n      type: \"string\",\r\n      resolve: (post) => `/blogs/${post._raw.flattenedPath}`,\r\n    },\r\n    toc: {\r\n      type: \"json\",\r\n      resolve: async(post) => {\r\n\r\n        const regXHeader = /\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\r\n        const slugger = new GithubSlugger()\r\n        const headings = Array.from(post.body.raw.matchAll(regXHeader)).map(\r\n          ({ groups }) => {\r\n            const flag = groups?.flag;\r\n            const content = groups?.content;\r\n            return {\r\n              level: flag?.length == 1 ? \"one\"\r\n              : flag?.length == 2 ? \"two\"\r\n              : \"three\",\r\n              text: content,\r\n              slug: content ? slugger.slug(content) : undefined\r\n            };\r\n          }\r\n        );\r\n\r\n        return headings;\r\n      }\r\n  },\r\n  readingTime: {\r\n    type: 'json',\r\n    resolve: (doc) => readingTime(doc.body.raw)\r\n  },\r\n}\r\n}));\r\n\r\n\r\nconst codeOptions = {\r\n  theme: 'github-dark',\r\n  // theme:{\r\n  //   dark: 'github-dark',\r\n  //   light: 'github-light',\r\n  // }\r\n}\r\n\r\nexport default makeSource({\r\n  contentDirPath: \"content\",\r\n  documentTypes: [Blog],\r\n  mdx: { remarkPlugins: [remarkGfm], rehypePlugins: [rehypeSlug, [rehypeAutolinkHeadings, {behavior :\"append\"}], [rehypePrettyCode, codeOptions]] },\r\n});\r\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,4BAA4B;AACnC,OAAO,gBAAgB;AACvB,OAAO,eAAe;AACtB,OAAO,sBAAsB;AAC7B,OAAO,mBAAmB;AAC1B,OAAO,iBAAiB;AAEjB,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,WAAW;AAAA,MACT,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,OAAO,EAAE,MAAM,QAAQ;AAAA,IACvB,aAAa;AAAA,MACX,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA,QAAQ,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACzC,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,IACvB;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,UAAU,KAAK,KAAK,aAAa;AAAA,IACtD;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,OAAM,SAAS;AAEtB,cAAM,aAAa;AACnB,cAAM,UAAU,IAAI,cAAc;AAClC,cAAM,WAAW,MAAM,KAAK,KAAK,KAAK,IAAI,SAAS,UAAU,CAAC,EAAE;AAAA,UAC9D,CAAC,EAAE,OAAO,MAAM;AACd,kBAAM,OAAO,QAAQ;AACrB,kBAAM,UAAU,QAAQ;AACxB,mBAAO;AAAA,cACL,OAAO,MAAM,UAAU,IAAI,QACzB,MAAM,UAAU,IAAI,QACpB;AAAA,cACF,MAAM;AAAA,cACN,MAAM,UAAU,QAAQ,KAAK,OAAO,IAAI;AAAA,YAC1C;AAAA,UACF;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA,IACJ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,YAAY,IAAI,KAAK,GAAG;AAAA,IAC5C;AAAA,EACF;AACA,EAAE;AAGF,IAAM,cAAc;AAAA,EAClB,OAAO;AAAA;AAAA;AAAA;AAAA;AAKT;AAEA,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK,EAAE,eAAe,CAAC,SAAS,GAAG,eAAe,CAAC,YAAY,CAAC,wBAAwB,EAAC,UAAU,SAAQ,CAAC,GAAG,CAAC,kBAAkB,WAAW,CAAC,EAAE;AAClJ,CAAC;",
  "names": []
}
